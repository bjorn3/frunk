var searchIndex = {};
searchIndex["frunk"] = {"doc":"Frunk: generic functional programming toolbelt for Rust","items":[[0,"semigroup","frunk","Module for holding the Semigroup typeclass definition and typeclass instances",null,null],[3,"Max","frunk::semigroup","Wrapper type for types that are ordered and can have a Max combination",null,null],[12,"0","","",0,null],[3,"Min","","Wrapper type for types that are ordered and can have a Min combination",null,null],[12,"0","","",1,null],[3,"Product","","Wrapper type for types that can have a Product combination",null,null],[12,"0","","",2,null],[3,"All","","Wrapper type for boolean that acts as a bitwise && combination",null,null],[12,"0","","",3,null],[3,"Any","","Wrapper type for boolean that acts as a bitwise || combination",null,null],[12,"0","","",4,null],[5,"combine_n","","Return this combined with itself `n` times.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"t"}}],[5,"combine_all_option","","Given a sequence of `xs`, combine them and return the total",null,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[8,"Semigroup","","A Semigroup is a class of thing that has a definable combine operation",null,null],[10,"combine","","Associative operation taking which combines two values.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"max"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"max"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"min"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"min"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"all"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"all"}],"output":{"name":"ordering"}}],[11,"hash","","",3,null],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"any"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"combine","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"monoid","frunk","Module for holding Monoid typeclass definitions and default implementations",null,null],[5,"combine_n","frunk::monoid","Return this combined with itself `n` times.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"t"}}],[5,"combine_all","","Given a sequence of `xs`, combine them and return the total",null,{"inputs":[{"name":"vec"}],"output":{"name":"t"}}],[8,"Monoid","","A Monoid is a Semigroup that has an empty/ zero value",null,null],[10,"empty","","For a given Monoid, returns its empty/zero value",6,{"inputs":[],"output":{"name":"self"}}],[11,"empty","frunk::semigroup","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",2,{"inputs":[],"output":{"name":"self"}}],[0,"validated","frunk","Module for holding Validated logic",null,null],[4,"Validated","frunk::validated","A Validated is either an Ok holding an HList or an Err, holding a vector of collected errors.",null,null],[13,"Ok","","",7,null],[13,"Err","","",7,null],[8,"IntoValidated","","Trait for \"lifting\" a given type into a Validated",null,null],[10,"into_validated","","Consumes the current Result into a Validated so that we can begin chaining",8,{"inputs":[{"name":"self"}],"output":{"generics":["hcons"],"name":"validated"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"validated"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"validated"}],"output":{"name":"ordering"}}],[11,"hash","","",7,null],[11,"is_ok","","Returns true if this validation is Ok, false otherwise",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if this validation is Err, false otherwise",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_result","","Turns this Validated into a Result.",7,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"result"}}],[11,"add","","",7,null],[11,"add","","",7,null],[0,"prelude","frunk","Traits that need to be imported for the complete `frunk` experience.",null,null],[14,"hlist","","Returns an `HList` based on the values passed in.",null,null],[14,"Hlist","","Returns a type signature for an HList of the provided types",null,null],[14,"field","","Used for creating a Field",null,null],[14,"Coprod","","Returns a type signature for a Coproduct of the provided types",null,null],[14,"hlist_pat","","Macro for pattern-matching on HLists.",null,null]],"paths":[[3,"Max"],[3,"Min"],[3,"Product"],[3,"All"],[3,"Any"],[8,"Semigroup"],[8,"Monoid"],[4,"Validated"],[8,"IntoValidated"]]};
searchIndex["frunk_core"] = {"doc":"Frunk Core","items":[[0,"hlist","frunk_core","Module that holds HList data structures, implementations, and typeclasses.",null,null],[3,"HNil","frunk_core::hlist","Represents the right-most end of a heterogeneous list",null,null],[3,"HCons","","Represents the most basic non-empty HList. Its value is held in `head` while its tail is another HList.",null,null],[12,"head","","",0,null],[12,"tail","","",0,null],[3,"There","","Used as an index into an `HList`.",null,null],[3,"Suffixed","","An index denoting that `Suffix` is just that.",null,null],[4,"Here","","Largely lifted from https://github.com/Sgeo/hlist/blob/master/src/lib.rs#L30 Used as an index into an `HList`.",null,null],[5,"h_cons","","Takes an element and an Hlist and returns another one with the element prepended to the original list. The original list is consumed",null,{"inputs":[{"name":"h"},{"name":"t"}],"output":{"name":"hcons"}}],[5,"lift_from","","Free function version of `LiftFrom::lift_from`.",null,{"inputs":[{"name":"t"}],"output":{"name":"pf"}}],[8,"HList","","Typeclass for HList-y behaviour",null,null],[18,"LEN","","Returns the length of a given HList type without making use of any references, or in fact, any values at all.",1,null],[11,"length","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"len","","Returns the length of a given HList",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"static_len","","Returns the length of a given HList type without making use of any references, or in fact, any values at all.",1,{"inputs":[],"output":{"name":"usize"}}],[11,"prepend","","Prepends an item to the current HList",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"hcons"}}],[8,"Selector","","Trait for borrowing an HList element by type",null,null],[10,"get","","Borrow an element by type from an HList.",2,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[8,"Plucker","","Trait defining extraction from a given HList",null,null],[16,"Remainder","","What is left after you pluck the target from the Self",3,null],[10,"pluck","","Remove an element by type from an HList.",3,null],[8,"Sculptor","","Trait for pulling out some subset of an HList, using type inference.",null,null],[16,"Remainder","","",4,null],[10,"sculpt","","Consumes the current HList and returns an HList with the requested shape.",4,null],[8,"IntoReverse","","Trait that allows for reversing a given data structure.",null,null],[16,"Output","","",5,null],[10,"into_reverse","","Reverses a given data structure.",5,null],[8,"HMappable","","Trail that allow for mapping over a data structure using mapping functions stored in another data structure",null,null],[16,"Output","","",6,null],[10,"map","","Maps over the current data structure using functions stored in another data structure.",6,null],[8,"HFoldRightable","","Foldr for HLists",null,null],[16,"Output","","",7,null],[10,"foldr","","foldr over a data structure",7,null],[8,"ToRef","","An alternative to AsRef that does not force the reference type to be a pointer itself.",null,null],[16,"Output","","",8,null],[10,"to_ref","","",8,null],[8,"HFoldLeftable","","Left fold for a given data structure",null,null],[16,"Output","","",9,null],[10,"foldl","","foldl over a data structure",9,null],[8,"IntoTuple2","","Trait for transforming an HList into a nested tuple.",null,null],[16,"HeadType","","The 0 element in the output tuple",10,null],[16,"TailOutput","","The 1 element in the output tuple",10,null],[10,"into_tuple2","","Turns an HList into nested Tuple2s, which are less troublesome to pattern match and have a nicer type signature.",10,null],[8,"LiftFrom","","Indexed type conversions of `T -> Self` with index `I`. This is a generalized version of `From` which for example allows the caller to use default values for parts of `Self` and thus \"fill in the blanks\".",null,null],[10,"lift_from","","Performs the indexed conversion.",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"LiftInto","","An indexed conversion that consumes `self`, and produces a `T`. To produce `T`, the index `I` may be used to for example \"fill in the blanks\". `LiftInto` is the reciprocal of `LiftFrom`.",null,null],[10,"lift_into","","Performs the indexed conversion.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"hnil"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"hnil"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"hnil"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"hnil"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"static_len","","",13,{"inputs":[],"output":{"name":"usize"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hcons"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"static_len","","",0,{"inputs":[],"output":{"name":"usize"}}],[11,"pop","","Returns the head of the list and the tail of the list as a tuple2. The original list is consumed",0,null],[11,"len","","Returns the length of a given HList",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"prepend","","Prepend an item to the current HList",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"hcons"}}],[11,"sculpt","","Consume the current HList and return an HList with the requested shape.",13,null],[11,"into_reverse","","Reverse the HList.",13,null],[11,"to_ref","","Return an HList where the contents are references to the original HList on which this method was called.",13,null],[11,"len","","Returns the length of a given HList",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"prepend","","Prepend an item to the current HList",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"hcons"}}],[11,"sculpt","","Consume the current HList and return an HList with the requested shape.",0,null],[11,"into_reverse","","Reverse the HList.",0,null],[11,"to_ref","","Return an HList where the contents are references to the original HList on which this method was called.",0,null],[11,"get","","Borrow an element by type from an HList.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"pluck","","Remove an element by type from an HList.",0,null],[11,"into_tuple2","","Turns an HList into nested Tuple2s, which are less troublesome to pattern match and have a nicer type signature.",0,null],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"rhs"}}],[11,"add","","",0,null],[11,"get","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fromtail"}}],[11,"pluck","","",0,null],[11,"pluck","","",0,null],[11,"sculpt","","",0,null],[11,"into_reverse","","",13,null],[11,"into_reverse","","",0,null],[11,"map","","",13,null],[11,"map","","",0,null],[11,"map","","",0,null],[11,"foldr","","",13,null],[11,"foldr","","",0,null],[11,"foldr","","",0,null],[11,"to_ref","","",13,null],[11,"to_ref","","",0,null],[11,"foldl","","",13,null],[11,"foldl","","",0,null],[11,"foldl","","",0,null],[11,"into_tuple2","","",0,null],[11,"into_tuple2","","",0,null],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"lift_from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"lift_from","","",0,{"inputs":[{"name":"valatix"}],"output":{"name":"self"}}],[0,"coproduct","frunk_core","Module that holds Coproduct data structures, traits, and implementations",null,null],[4,"Coproduct","frunk_core::coproduct","Enum type representing a Coproduct. Think of this as a Result, but capable of supporting any arbitrary number of types instead of just 2.",null,null],[13,"Inl","","Coproduct is either H or T, in this case, it is H",14,null],[13,"Inr","","Coproduct is either H or T, in this case, it is T",14,null],[4,"CNil","","Phantom type for signature purposes only (has no value)",null,null],[8,"CoprodInjector","","Trait for instantiating a coproduct from an element",null,null],[10,"inject","","Instantiate a coproduct from an element.",15,{"inputs":[{"name":"injecttype"}],"output":{"name":"self"}}],[8,"CoproductSelector","","Trait for borrowing a coproduct element by type",null,null],[10,"get","","Borrow an element from a coproduct by type.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"CoproductTaker","","Trait for retrieving a coproduct element by type",null,null],[10,"take","","Retrieve an element from a coproduct by type, ignoring all others.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"CoproductFoldable","","Trait for implementing \"folding\" a Coproduct into a value.",null,null],[10,"fold","","",18,{"inputs":[{"name":"self"},{"name":"folder"}],"output":{"name":"output"}}],[8,"CoprodUninjector","","Trait for extracting a value from a coproduct in an exhaustive way.",null,null],[16,"Remainder","","",19,null],[10,"uninject","","Attempt to extract a value from a coproduct (or get the remaining possibilities).",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"CoproductSubsetter","","Trait for extracting a subset of the possible types in a coproduct.",null,null],[16,"Remainder","","",20,null],[10,"subset","","Extract a subset of the possible types in a coproduct (or get the remaining possibilities)",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"CoproductEmbedder","","Trait for converting a coproduct into another that can hold its variants.",null,null],[10,"embed","","Convert a coproduct into another that can hold its variants.",21,{"inputs":[{"name":"self"}],"output":{"name":"out"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"coproduct"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"coproduct"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"coproduct"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"coproduct"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"coproduct"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"coproduct"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"coproduct"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"coproduct"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"coproduct"}],"output":{"name":"ordering"}}],[11,"hash","","",14,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"cnil"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"cnil"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"cnil"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"cnil"}],"output":{"name":"ordering"}}],[11,"hash","","",22,null],[11,"inject","","Instantiate a coproduct from an element.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get","","Borrow an element from a coproduct by type.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"take","","Retrieve an element from a coproduct by type, ignoring all others.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"uninject","","Attempt to extract a value from a coproduct (or get the remaining possibilities).",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"subset","","Extract a subset of the possible types in a coproduct (or get the remaining possibilities)",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"embed","","Convert a coproduct into another that can hold its variants.",14,{"inputs":[{"name":"self"}],"output":{"name":"targets"}}],[11,"inject","","",14,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"inject","","",14,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"get","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"take","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"take","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fold","","",14,{"inputs":[{"name":"self"},{"name":"hcons"}],"output":{"name":"r"}}],[11,"fold","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"coproduct"}}],[11,"uninject","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"uninject","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"embed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"cnil"}}],[11,"embed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"coproduct"}}],[11,"embed","","",14,{"inputs":[{"name":"self"}],"output":{"name":"out"}}],[0,"generic","frunk_core","This module holds the machinery behind Generic.",null,null],[5,"from_generic","frunk_core::generic","Given a generic Representation of an A, returns A",null,{"inputs":[{"name":"repr"}],"output":{"name":"a"}}],[5,"into_generic","","Given an A, returns its generic Representation",null,{"inputs":[{"name":"a"}],"output":{"name":"repr"}}],[5,"convert_from","","Converts one type into another assuming they have the same generic Representation",null,{"inputs":[{"name":"a"}],"output":{"name":"b"}}],[8,"Generic","","A trait that converts from a type to a generic representation",null,null],[16,"Repr","","The generic representation type",23,null],[10,"into","","Go from something to Repr",23,null],[10,"from","","Go from Repr to something",23,null],[11,"convert_from","","From one type to another using a type with a compatible generic representation",23,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[0,"labelled","frunk_core","This module holds the machinery behind LabelledGeneric.",null,null],[3,"Field","frunk_core::labelled","A Label contains a type-level Name, a runtime value, and a reference to a `&'static str` name.",null,null],[12,"name","","",24,null],[12,"value","","",24,null],[3,"ValueField","","A version of Field that doesn't have a type-level label, just a value-level one",null,null],[12,"name","","",25,null],[12,"value","","",25,null],[4,"a","","",null,null],[4,"b","","",null,null],[4,"c","","",null,null],[4,"d","","",null,null],[4,"e","","",null,null],[4,"f","","",null,null],[4,"g","","",null,null],[4,"h","","",null,null],[4,"i","","",null,null],[4,"j","","",null,null],[4,"k","","",null,null],[4,"l","","",null,null],[4,"m","","",null,null],[4,"n","","",null,null],[4,"o","","",null,null],[4,"p","","",null,null],[4,"q","","",null,null],[4,"r","","",null,null],[4,"s","","",null,null],[4,"t","","",null,null],[4,"u","","",null,null],[4,"v","","",null,null],[4,"w","","",null,null],[4,"x","","",null,null],[4,"y","","",null,null],[4,"z","","",null,null],[4,"A","","",null,null],[4,"B","","",null,null],[4,"C","","",null,null],[4,"D","","",null,null],[4,"E","","",null,null],[4,"F","","",null,null],[4,"G","","",null,null],[4,"H","","",null,null],[4,"I","","",null,null],[4,"J","","",null,null],[4,"K","","",null,null],[4,"L","","",null,null],[4,"M","","",null,null],[4,"N","","",null,null],[4,"O","","",null,null],[4,"P","","",null,null],[4,"Q","","",null,null],[4,"R","","",null,null],[4,"S","","",null,null],[4,"T","","",null,null],[4,"U","","",null,null],[4,"V","","",null,null],[4,"W","","",null,null],[4,"X","","",null,null],[4,"Y","","",null,null],[4,"Z","","",null,null],[4,"__","","",null,null],[4,"_1","","",null,null],[4,"_2","","",null,null],[4,"_3","","",null,null],[4,"_4","","",null,null],[4,"_5","","",null,null],[4,"_6","","",null,null],[4,"_7","","",null,null],[4,"_8","","",null,null],[4,"_9","","",null,null],[4,"_0","","",null,null],[5,"from_labelled_generic","","Given a labelled generic Representation of an A, returns A",null,{"inputs":[{"name":"repr"}],"output":{"name":"a"}}],[5,"into_labelled_generic","","Given an A, returns its labelled generic Representation",null,{"inputs":[{"name":"a"}],"output":{"name":"repr"}}],[5,"labelled_convert_from","","Converts one type into another assuming they have the same labelled generic Representation",null,{"inputs":[{"name":"a"}],"output":{"name":"b"}}],[5,"sculpted_convert_from","","Converts from one type into another assuming that their labelled generic representations can be sculpted into each other.",null,{"inputs":[{"name":"a"}],"output":{"name":"b"}}],[5,"transform_from","","Converts from one type into another assuming that their labelled generic representations can be sculpted into each other.",null,{"inputs":[{"name":"a"}],"output":{"name":"b"}}],[5,"field_with_name","","Returns a new Field for a given value and custom name.",null,{"inputs":[{"name":"str"},{"name":"value"}],"output":{"name":"field"}}],[8,"LabelledGeneric","","A trait that converts from a type to a labelled generic representation",null,null],[16,"Repr","","The labelled generic representation type",26,null],[10,"into","","Go from something to Repr",26,null],[10,"from","","Go from labelled Repr to something",26,null],[11,"convert_from","","From one type to another using a type with a compatible labelled generic representation",26,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"sculpted_convert_from","","Converts from another type A into Self assuming that A and Self have labelled generic representations that can be sculpted into each other.",26,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"transform_from","","Converts from another type A into Self assuming that A and Self have labelled generic representations that can be sculpted into each other.",26,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[8,"IntoUnlabelled","","Trait for turning a Field HList into an un-labelled HList",null,null],[16,"Output","","",27,null],[10,"into_unlabelled","","Turns the current HList into an unlabelled one.",27,null],[8,"IntoValueLabelled","","A trait that strips type-level strings from the labels",null,null],[16,"Output","","",28,null],[10,"into_value_labelled","","Turns the current HList into a value-labelled one.",28,null],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",29,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"ordering"}}],[11,"hash","","",29,null],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"ordering"}}],[11,"hash","","",30,null],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"ordering"}}],[11,"hash","","",31,null],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"ordering"}}],[11,"hash","","",32,null],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",33,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"ordering"}}],[11,"hash","","",33,null],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"hash","","",34,null],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"g"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",35,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"ordering"}}],[11,"hash","","",35,null],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"ordering"}}],[11,"hash","","",36,null],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",37,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"hash","","",37,null],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"j"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"ordering"}}],[11,"hash","","",38,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"ordering"}}],[11,"hash","","",39,null],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"l"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",40,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"ordering"}}],[11,"hash","","",40,null],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"partial_cmp","","",41,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",41,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"ordering"}}],[11,"hash","","",41,null],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",42,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ordering"}}],[11,"hash","","",42,null],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"ordering"}}],[11,"hash","","",43,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",44,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"ordering"}}],[11,"hash","","",44,null],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"q"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",45,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"ordering"}}],[11,"hash","","",45,null],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"partial_cmp","","",46,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",46,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"ordering"}}],[11,"hash","","",46,null],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",47,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"ordering"}}],[11,"hash","","",47,null],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",48,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"hash","","",48,null],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",49,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"ordering"}}],[11,"hash","","",49,null],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",50,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"ordering"}}],[11,"hash","","",50,null],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",51,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"ordering"}}],[11,"hash","","",51,null],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"x"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",52,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"ordering"}}],[11,"hash","","",52,null],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"y"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"y"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"self"},{"name":"y"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",53,{"inputs":[{"name":"self"},{"name":"y"}],"output":{"name":"ordering"}}],[11,"hash","","",53,null],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"z"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"ordering"}}],[11,"hash","","",54,null],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",55,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"ordering"}}],[11,"hash","","",55,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"ordering"}}],[11,"hash","","",56,null],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"ordering"}}],[11,"hash","","",57,null],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"ordering"}}],[11,"hash","","",58,null],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"ordering"}}],[11,"hash","","",59,null],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"ordering"}}],[11,"hash","","",60,null],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"g"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",61,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"ordering"}}],[11,"hash","","",61,null],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"h"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",62,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"ordering"}}],[11,"hash","","",62,null],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",63,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"hash","","",63,null],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"j"}}],[11,"partial_cmp","","",64,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",64,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"ordering"}}],[11,"hash","","",64,null],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"partial_cmp","","",65,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",65,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"ordering"}}],[11,"hash","","",65,null],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"l"}}],[11,"partial_cmp","","",66,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",66,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"ordering"}}],[11,"hash","","",66,null],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"m"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",67,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"ordering"}}],[11,"hash","","",67,null],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"bool"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"n"}}],[11,"partial_cmp","","",68,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",68,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"ordering"}}],[11,"hash","","",68,null],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"partial_cmp","","",69,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",69,{"inputs":[{"name":"self"},{"name":"o"}],"output":{"name":"ordering"}}],[11,"hash","","",69,null],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"partial_cmp","","",70,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",70,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"ordering"}}],[11,"hash","","",70,null],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"q"}}],[11,"partial_cmp","","",71,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",71,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"ordering"}}],[11,"hash","","",71,null],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"partial_cmp","","",72,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",72,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"ordering"}}],[11,"hash","","",72,null],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"partial_cmp","","",73,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",73,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"ordering"}}],[11,"hash","","",73,null],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",74,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ordering"}}],[11,"hash","","",74,null],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"u"}}],[11,"partial_cmp","","",75,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",75,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"ordering"}}],[11,"hash","","",75,null],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"bool"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",76,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"ordering"}}],[11,"hash","","",76,null],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",77,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"ordering"}}],[11,"hash","","",77,null],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"x"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",78,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"ordering"}}],[11,"hash","","",78,null],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"y"}],"output":{"name":"bool"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"y"}}],[11,"partial_cmp","","",79,{"inputs":[{"name":"self"},{"name":"y"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",79,{"inputs":[{"name":"self"},{"name":"y"}],"output":{"name":"ordering"}}],[11,"hash","","",79,null],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"bool"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"z"}}],[11,"partial_cmp","","",80,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",80,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"ordering"}}],[11,"hash","","",80,null],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"__"}],"output":{"name":"bool"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"__"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"self"},{"name":"__"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",81,{"inputs":[{"name":"self"},{"name":"__"}],"output":{"name":"ordering"}}],[11,"hash","","",81,null],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"_1"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"_1"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"self"},{"name":"_1"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",82,{"inputs":[{"name":"self"},{"name":"_1"}],"output":{"name":"ordering"}}],[11,"hash","","",82,null],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"_2"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"_2"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"self"},{"name":"_2"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",83,{"inputs":[{"name":"self"},{"name":"_2"}],"output":{"name":"ordering"}}],[11,"hash","","",83,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"_3"}],"output":{"name":"bool"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"_3"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"self"},{"name":"_3"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",84,{"inputs":[{"name":"self"},{"name":"_3"}],"output":{"name":"ordering"}}],[11,"hash","","",84,null],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"_4"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"_4"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"_4"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"_4"}],"output":{"name":"ordering"}}],[11,"hash","","",85,null],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"_5"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"_5"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"self"},{"name":"_5"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",86,{"inputs":[{"name":"self"},{"name":"_5"}],"output":{"name":"ordering"}}],[11,"hash","","",86,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"_6"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"_6"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"_6"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"_6"}],"output":{"name":"ordering"}}],[11,"hash","","",87,null],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"_7"}],"output":{"name":"bool"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"_7"}}],[11,"partial_cmp","","",88,{"inputs":[{"name":"self"},{"name":"_7"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",88,{"inputs":[{"name":"self"},{"name":"_7"}],"output":{"name":"ordering"}}],[11,"hash","","",88,null],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"_8"}],"output":{"name":"bool"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"_8"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"self"},{"name":"_8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",89,{"inputs":[{"name":"self"},{"name":"_8"}],"output":{"name":"ordering"}}],[11,"hash","","",89,null],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"_9"}],"output":{"name":"bool"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"_9"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"self"},{"name":"_9"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",90,{"inputs":[{"name":"self"},{"name":"_9"}],"output":{"name":"ordering"}}],[11,"hash","","",90,null],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"_0"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"_0"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"self"},{"name":"_0"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",91,{"inputs":[{"name":"self"},{"name":"_0"}],"output":{"name":"ordering"}}],[11,"hash","","",91,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"ordering"}}],[11,"hash","","",24,null],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"valuefield"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"valuefield"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"valuefield"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"valuefield"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"self"},{"name":"valuefield"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"self"},{"name":"valuefield"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"self"},{"name":"valuefield"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"self"},{"name":"valuefield"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"valuefield"}],"output":{"name":"ordering"}}],[11,"hash","","",25,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_unlabelled","frunk_core::hlist","",13,null],[11,"into_unlabelled","","",0,null],[11,"into_value_labelled","","",13,null],[11,"into_value_labelled","","",0,null],[11,"from","","",13,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[11,"from","","",0,null],[11,"into","","",0,null],[14,"hlist","frunk_core","Returns an `HList` based on the values passed in.",null,null],[14,"hlist_pat","","Macro for pattern-matching on HLists.",null,null],[14,"Hlist","","Returns a type signature for an HList of the provided types",null,null],[14,"Coprod","","Returns a type signature for a Coproduct of the provided types",null,null],[14,"field","","Used for creating a Field",null,null]],"paths":[[3,"HCons"],[8,"HList"],[8,"Selector"],[8,"Plucker"],[8,"Sculptor"],[8,"IntoReverse"],[8,"HMappable"],[8,"HFoldRightable"],[8,"ToRef"],[8,"HFoldLeftable"],[8,"IntoTuple2"],[8,"LiftFrom"],[8,"LiftInto"],[3,"HNil"],[4,"Coproduct"],[8,"CoprodInjector"],[8,"CoproductSelector"],[8,"CoproductTaker"],[8,"CoproductFoldable"],[8,"CoprodUninjector"],[8,"CoproductSubsetter"],[8,"CoproductEmbedder"],[4,"CNil"],[8,"Generic"],[3,"Field"],[3,"ValueField"],[8,"LabelledGeneric"],[8,"IntoUnlabelled"],[8,"IntoValueLabelled"],[4,"a"],[4,"b"],[4,"c"],[4,"d"],[4,"e"],[4,"f"],[4,"g"],[4,"h"],[4,"i"],[4,"j"],[4,"k"],[4,"l"],[4,"m"],[4,"n"],[4,"o"],[4,"p"],[4,"q"],[4,"r"],[4,"s"],[4,"t"],[4,"u"],[4,"v"],[4,"w"],[4,"x"],[4,"y"],[4,"z"],[4,"A"],[4,"B"],[4,"C"],[4,"D"],[4,"E"],[4,"F"],[4,"G"],[4,"H"],[4,"I"],[4,"J"],[4,"K"],[4,"L"],[4,"M"],[4,"N"],[4,"O"],[4,"P"],[4,"Q"],[4,"R"],[4,"S"],[4,"T"],[4,"U"],[4,"V"],[4,"W"],[4,"X"],[4,"Y"],[4,"Z"],[4,"__"],[4,"_1"],[4,"_2"],[4,"_3"],[4,"_4"],[4,"_5"],[4,"_6"],[4,"_7"],[4,"_8"],[4,"_9"],[4,"_0"]]};
searchIndex["frunk_derives"] = {"doc":"Frunk Derives","items":[[5,"generic","frunk_derives","Derives a Generic instance based on HList for a given Struct or Tuple Struct",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"labelled_generic","","Derives a Generic instance based on Field + HList for a given Struct (Tuple Structs not supported because they have no labels)",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["proc_macro2"] = {"doc":"A \"shim crate\" intended to multiplex the [`proc_macro`] API on to stable Rust.","items":[[3,"TokenStream","proc_macro2","",null,null],[3,"LexError","","",null,null],[3,"Span","","",null,null],[3,"TokenTree","","",null,null],[12,"span","","",0,null],[12,"kind","","",0,null],[3,"Term","","",null,null],[3,"Literal","","",null,null],[3,"TokenTreeIter","","",null,null],[4,"TokenNode","","",null,null],[13,"Group","","",1,null],[13,"Term","","",1,null],[13,"Op","","",1,null],[13,"Literal","","",1,null],[4,"Delimiter","","",null,null],[13,"Parenthesis","","",2,null],[13,"Brace","","",2,null],[13,"Bracket","","",2,null],[13,"None","","",2,null],[4,"Spacing","","",null,null],[13,"Alone","","",3,null],[13,"Joint","","",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["tokenstream","lexerror"],"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"from","","",4,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokenstream"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tokentreeiter"}}],[11,"empty","","",4,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"is_empty","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"call_site","","",5,{"inputs":[],"output":{"name":"span"}}],[11,"def_site","","",5,{"inputs":[],"output":{"name":"span"}}],[11,"resolved_at","","Creates a new span with the same line/column information as `self` but that resolves symbols as though it were at `other`.",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"located_at","","Creates a new span with the same name resolution behavior as `self` but with the line/column information of `other`.",5,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"tokennode"}],"output":{"name":"tokentree"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tokennode"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"delimiter"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"term"}}],[11,"intern","","",6,{"inputs":[{"name":"str"}],"output":{"name":"term"}}],[11,"as_str","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[11,"integer","","",7,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"u8","","",7,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"u16","","",7,{"inputs":[{"name":"u16"}],"output":{"name":"literal"}}],[11,"u32","","",7,{"inputs":[{"name":"u32"}],"output":{"name":"literal"}}],[11,"u64","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"literal"}}],[11,"usize","","",7,{"inputs":[{"name":"usize"}],"output":{"name":"literal"}}],[11,"i8","","",7,{"inputs":[{"name":"i8"}],"output":{"name":"literal"}}],[11,"i16","","",7,{"inputs":[{"name":"i16"}],"output":{"name":"literal"}}],[11,"i32","","",7,{"inputs":[{"name":"i32"}],"output":{"name":"literal"}}],[11,"i64","","",7,{"inputs":[{"name":"i64"}],"output":{"name":"literal"}}],[11,"isize","","",7,{"inputs":[{"name":"isize"}],"output":{"name":"literal"}}],[11,"float","","",7,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f64","","",7,{"inputs":[{"name":"f64"}],"output":{"name":"literal"}}],[11,"f32","","",7,{"inputs":[{"name":"f32"}],"output":{"name":"literal"}}],[11,"string","","",7,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"character","","",7,{"inputs":[{"name":"char"}],"output":{"name":"literal"}}],[11,"byte_string","","",7,null],[11,"byte_char","","",7,{"inputs":[{"name":"u8"}],"output":{"name":"literal"}}],[11,"doccomment","","",7,{"inputs":[{"name":"str"}],"output":{"name":"literal"}}],[11,"raw_string","","",7,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"raw_byte_string","","",7,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"literal"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["tokentree"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TokenTree"],[4,"TokenNode"],[4,"Delimiter"],[4,"Spacing"],[3,"TokenStream"],[3,"Span"],[3,"Term"],[3,"Literal"],[3,"TokenTreeIter"],[3,"LexError"]]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust syntax tree data structures into tokens of source code.","items":[[3,"Tokens","quote","Tokens produced by a [`quote!`] invocation.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"tokens"}}],[11,"new","","Empty tokens.",0,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"u"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",0,{"inputs":[{"name":"self"},{"name":"i"},{"name":"u"}],"output":null}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"into_iter","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a [`quote!`] invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens originating within the macro invocation.",null,null],[11,"into_tokens","","Convert `self` directly into a `Tokens` object.",1,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}]],"paths":[[3,"Tokens"],[8,"ToTokens"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust tokens into a syntax tree of Rust source code.","items":[[3,"Attribute","syn","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tts","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy, Clone)`.",null,null],[12,"ident","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",null,null],[12,"ident","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `pub(crate)`.",null,null],[12,"pub_token","","",7,null],[12,"paren_token","","",7,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprAddrOf","","A referencing operation: `&a` or `&mut a`.",null,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",10,null],[12,"left","","",10,null],[12,"op","","",10,null],[12,"right","","",10,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional expression.",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",11,null],[12,"func","","",11,null],[12,"paren_token","","",11,null],[12,"args","","",11,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",12,null],[12,"expr","","",12,null],[12,"as_token","","",12,null],[12,"ty","","",12,null],[3,"ExprCatch","","A catch expression: `do catch { ... }`.",null,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",null,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",null,null],[3,"ExprIfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",null,null],[3,"ExprInPlace","","A placement expression: `place <- value`.",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",13,null],[12,"expr","","",13,null],[12,"bracket_token","","",13,null],[12,"index","","",13,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",14,null],[12,"lit","","",14,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",null,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",15,null],[12,"paren_token","","",15,null],[12,"expr","","",15,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",null,null],[12,"attrs","","",16,null],[12,"qself","","",16,null],[12,"path","","",16,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[3,"ExprRepeat","","An array literal constructed from one repeated element: `[0u8; N]`.",null,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",17,null],[12,"op","","",17,null],[12,"expr","","",17,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[3,"ExprVerbatim","","Tokens in expression position not interpreted by Syn.",null,null],[12,"tts","","",18,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[3,"ExprWhileLet","","A while-let loop: `while let pat = expr { ... }`.",null,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",19,null],[12,"span","","",19,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",20,null],[12,"lt_token","","",20,null],[12,"lifetimes","","",20,null],[12,"gt_token","","",20,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",21,null],[12,"const_token","","",21,null],[12,"ident","","",21,null],[12,"colon_token","","",21,null],[12,"ty","","",21,null],[12,"eq_token","","",21,null],[12,"default","","",21,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lt_token","","",22,null],[12,"params","","",22,null],[12,"gt_token","","",22,null],[12,"where_clause","","",22,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",23,null],[12,"lifetime","","",23,null],[12,"colon_token","","",23,null],[12,"bounds","","",23,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",24,null],[12,"eq_token","","",24,null],[12,"rhs_ty","","",24,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",25,null],[12,"colon_token","","",25,null],[12,"bounds","","",25,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",26,null],[12,"bounded_ty","","The type being bounded",26,null],[12,"colon_token","","",26,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",26,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"modifier","","",27,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",27,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",27,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",28,null],[12,"ident","","",28,null],[12,"colon_token","","",28,null],[12,"bounds","","",28,null],[12,"eq_token","","",28,null],[12,"default","","",28,null],[3,"WhereClause","","A `where` clause in a definition: `where T: Deserialize<'de>, D: 'static`.",null,null],[12,"where_token","","",29,null],[12,"predicates","","",29,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal variable name.",null,null],[12,"span","","",30,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"span","","",31,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",32,null],[12,"span","","",32,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[12,"span","","",33,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[12,"span","","",34,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[12,"span","","",35,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[12,"span","","",36,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[12,"span","","",37,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[12,"span","","",38,null],[3,"LitVerbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",null,null],[12,"token","","",39,null],[12,"span","","",39,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",40,null],[12,"bang_token","","",40,null],[12,"delimiter","","",40,null],[12,"tts","","",40,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",41,null],[12,"brace_token","","",41,null],[12,"variants","","",41,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",42,null],[12,"fields","","",42,null],[12,"semi_token","","",42,null],[3,"DataUnion","","A tagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",43,null],[12,"fields","","",43,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",44,null],[12,"vis","","Visibility of the struct or enum.",44,null],[12,"ident","","Name of the struct or enum.",44,null],[12,"generics","","Generics required to complete the definition.",44,null],[12,"data","","Data within the struct or enum.",44,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",45,null],[12,"name","","",45,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize) -> bool`.",null,null],[12,"name","","",46,null],[12,"ty","","",46,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",47,null],[12,"elem","","",47,null],[12,"semi_token","","",47,null],[12,"len","","",47,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"unsafety","","",48,null],[12,"abi","","",48,null],[12,"fn_token","","",48,null],[12,"lifetimes","","",48,null],[12,"paren_token","","",48,null],[12,"inputs","","",48,null],[12,"variadic","","",48,null],[12,"output","","",48,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",49,null],[12,"elem","","",49,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",null,null],[12,"impl_token","","",50,null],[12,"bounds","","",50,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler: `_`.",null,null],[12,"underscore_token","","",51,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",52,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",53,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",54,null],[12,"elem","","",54,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",null,null],[12,"qself","","",55,null],[12,"path","","",55,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",56,null],[12,"const_token","","",56,null],[12,"mutability","","",56,null],[12,"elem","","",56,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",57,null],[12,"lifetime","","",57,null],[12,"mutability","","",57,null],[12,"elem","","",57,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",58,null],[12,"elem","","",58,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",null,null],[12,"dyn_token","","",59,null],[12,"bounds","","",59,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",60,null],[12,"elems","","",60,null],[3,"TypeVerbatim","","Tokens in type position not interpreted by Syn.",null,null],[12,"tts","","",61,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>` in `HashMap<K, V>`.",null,null],[12,"colon2_token","","",62,null],[12,"lt_token","","",62,null],[12,"args","","",62,null],[12,"gt_token","","",62,null],[3,"Binding","","A binding (equality constraint) on an associated type: `Item = u8`.",null,null],[12,"ident","","",63,null],[12,"eq_token","","",63,null],[12,"ty","","",63,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in `Fn(A,B) -> C`.",null,null],[12,"paren_token","","",64,null],[12,"inputs","","`(A, B)`",64,null],[12,"output","","`C`",64,null],[3,"Path","","A path at which a named item is exported: `std::collections::HashMap`.",null,null],[12,"leading_colon","","",65,null],[12,"segments","","",65,null],[3,"PathSegment","","A segment of a path together with any path arguments on that segment.",null,null],[12,"ident","","",66,null],[12,"arguments","","",66,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T as Display>::fmt`.",null,null],[12,"lt_token","","",67,null],[12,"ty","","",67,null],[12,"position","","",67,null],[12,"as_token","","",67,null],[12,"gt_token","","",67,null],[3,"PathTokens","","A helper for printing a self-type qualified path as tokens.",null,null],[12,"0","","",68,null],[12,"1","","",68,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and attributes that are contained within an item.",null,null],[13,"Outer","","",69,null],[13,"Inner","","",69,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Word","","",70,null],[13,"List","","A structured list within an attribute, like `derive(Copy, Clone)`.",70,null],[13,"NameValue","","A name-value pair within an attribute, like `feature = \"nightly\"`.",70,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in `#[derive(Copy)]` which would be a nested `Meta::Word`.",71,null],[13,"Literal","","A Rust literal, like the `\"new_name\"` in `#[rename(\"new_name\")]`.",71,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point { x: f64, y: f64 }`.",72,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as `Some(T)`.",72,null],[13,"Unit","","Unit struct or unit variant such as `None`.",72,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or `pub(restricted)`.",null,null],[13,"Public","","A public visibility level: `pub`.",73,null],[13,"Crate","","A crate-level visibility: `pub(crate)`.",73,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or `pub(super)` or `pub(in some::module)`.",73,null],[13,"Inherited","","An inherited visibility, which usually means private.",73,null],[4,"Expr","","A Rust expression.",null,null],[13,"Box","","A box expression: `box f`.",74,null],[13,"InPlace","","A placement expression: `place <- value`.",74,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",74,null],[13,"Call","","A function call expression: `invoke(a, b)`.",74,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",74,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",74,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",74,null],[13,"Unary","","A unary operation: `!x`, `*x`.",74,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",74,null],[13,"Cast","","A cast expression: `foo as f64`.",74,null],[13,"Type","","A type ascription expression: `foo: f64`.",74,null],[13,"If","","An `if` expression with an optional `else` block: `if expr { ... } else { ... }`.",74,null],[13,"IfLet","","An `if let` expression with an optional `else` block: `if let pat = expr { ... } else { ... }`.",74,null],[13,"While","","A while loop: `while expr { ... }`.",74,null],[13,"WhileLet","","A while-let loop: `while let pat = expr { ... }`.",74,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",74,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",74,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {} }`.",74,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",74,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",74,null],[13,"Block","","A blocked scope: `{ ... }`.",74,null],[13,"Assign","","An assignment expression: `a = compute()`.",74,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",74,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple struct field (`obj.0`).",74,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",74,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",74,null],[13,"Path","","A path like `std::mem::replace` possibly containing generic parameters and a qualified self-type.",74,null],[13,"AddrOf","","A referencing operation: `&a` or `&mut a`.",74,null],[13,"Break","","A `break`, with an optional label to break and an optional expression.",74,null],[13,"Continue","","A `continue`, with an optional label.",74,null],[13,"Return","","A `return`, with an optional value to be returned.",74,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",74,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",74,null],[13,"Repeat","","An array literal constructed from one repeated element: `[0u8; N]`.",74,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",74,null],[13,"Group","","An expression contained within invisible delimiters.",74,null],[13,"Try","","A try-expression: `expr?`.",74,null],[13,"Catch","","A catch expression: `do catch { ... }`.",74,null],[13,"Yield","","A yield expression: `yield expr`.",74,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",74,null],[4,"Member","","A struct or tuple struct field accessed in a struct literal or field expression.",null,null],[13,"Named","","A named field like `self.x`.",75,null],[13,"Unnamed","","An unnamed field like `self.0`.",75,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T: Into<String>`, `'a: 'b`, `const LEN: usize`.",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",76,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",76,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",76,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the `?` in `?Sized`.",null,null],[13,"None","","",77,null],[13,"Maybe","","",77,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",78,null],[13,"Lifetime","","",78,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T: Deserialize<'de>`.",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>: Trait<'c>`.",79,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",79,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",79,null],[4,"FloatSuffix","","The suffix on a floating point literal if any, like the `f32` in `1.0f32`.",null,null],[13,"F32","","",80,null],[13,"F64","","",80,null],[13,"None","","",80,null],[4,"IntSuffix","","The suffix on an integer literal if any, like the `u8` in `127u8`.",null,null],[13,"I8","","",81,null],[13,"I16","","",81,null],[13,"I32","","",81,null],[13,"I64","","",81,null],[13,"I128","","",81,null],[13,"Isize","","",81,null],[13,"U8","","",81,null],[13,"U16","","",81,null],[13,"U32","","",81,null],[13,"U64","","",81,null],[13,"U128","","",81,null],[13,"Usize","","",81,null],[13,"None","","",81,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",82,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",82,null],[13,"Byte","","A byte literal: `b'f'`.",82,null],[13,"Char","","A character literal: `'a'`.",82,null],[13,"Int","","An integer literal: `1` or `1u16`.",82,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",82,null],[13,"Bool","","A boolean literal: `true` or `false`.",82,null],[13,"Verbatim","","A raw token literal not interpreted by Syn, possibly because it represents an integer larger than 64 bits.",82,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a raw string like `r##\"data\"##`.",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",83,null],[13,"Raw","","A raw string like `r##\"data\"##`.",83,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or `m!{...}` or `m![...]`.",null,null],[13,"Paren","","",84,null],[13,"Brace","","",84,null],[13,"Bracket","","",84,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",85,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",85,null],[13,"Union","","A tagged union input to a `proc_macro_derive` macro.",85,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",86,null],[13,"Sub","","The `-` operator (subtraction)",86,null],[13,"Mul","","The `*` operator (multiplication)",86,null],[13,"Div","","The `/` operator (division)",86,null],[13,"Rem","","The `%` operator (modulus)",86,null],[13,"And","","The `&&` operator (logical and)",86,null],[13,"Or","","The `||` operator (logical or)",86,null],[13,"BitXor","","The `^` operator (bitwise xor)",86,null],[13,"BitAnd","","The `&` operator (bitwise and)",86,null],[13,"BitOr","","The `|` operator (bitwise or)",86,null],[13,"Shl","","The `<<` operator (shift left)",86,null],[13,"Shr","","The `>>` operator (shift right)",86,null],[13,"Eq","","The `==` operator (equality)",86,null],[13,"Lt","","The `<` operator (less than)",86,null],[13,"Le","","The `<=` operator (less than or equal to)",86,null],[13,"Ne","","The `!=` operator (not equal to)",86,null],[13,"Ge","","The `>=` operator (greater than or equal to)",86,null],[13,"Gt","","The `>` operator (greater than)",86,null],[13,"AddEq","","The `+=` operator",86,null],[13,"SubEq","","The `-=` operator",86,null],[13,"MulEq","","The `*=` operator",86,null],[13,"DivEq","","The `/=` operator",86,null],[13,"RemEq","","The `%=` operator",86,null],[13,"BitXorEq","","The `^=` operator",86,null],[13,"BitAndEq","","The `&=` operator",86,null],[13,"BitOrEq","","The `|=` operator",86,null],[13,"ShlEq","","The `<<=` operator",86,null],[13,"ShrEq","","The `>>=` operator",86,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",87,null],[13,"Not","","The `!` operator for logical inversion",87,null],[13,"Neg","","The `-` operator for negation",87,null],[4,"BareFnArgName","","Name of an argument in a function type: the `n` in `fn(n: usize)`.",null,null],[13,"Named","","Argument given a name.",88,null],[13,"Wild","","Argument not given a name, matched with `_`.",88,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",89,null],[13,"Type","","A particular type is returned.",89,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",90,null],[13,"Array","","A fixed size array type: `[T; n]`.",90,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",90,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",90,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",90,null],[13,"Never","","The never type: `!`.",90,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",90,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with a self-type as in `<Vec<T> as SomeTrait>::Associated`.",90,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",90,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",90,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",90,null],[13,"Group","","A type contained within invisible delimiters.",90,null],[13,"Infer","","Indication that a type should be inferred by the compiler: `_`.",90,null],[13,"Macro","","A macro in the type position.",90,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",90,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item = T`.",null,null],[13,"Lifetime","","A lifetime argument.",91,null],[13,"Type","","A type argument.",91,null],[13,"Binding","","A binding (equality constraint) on an associated type: the `Item = u8` in `Iterator<Item = u8>`.",91,null],[13,"Const","","A const expression. Must be inside of a block.",91,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path segment.",null,null],[13,"None","","",92,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",92,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",92,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",null,{"inputs":[{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",null,{"inputs":[{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[0,"token","","Tokens representing Rust punctuation, keywords, and delimiters.",null,null],[3,"Add","syn::token","`+`",null,null],[12,"0","","",93,null],[3,"AddEq","","`+=`",null,null],[12,"0","","",94,null],[3,"And","","`&`",null,null],[12,"0","","",95,null],[3,"AndAnd","","`&&`",null,null],[12,"0","","",96,null],[3,"AndEq","","`&=`",null,null],[12,"0","","",97,null],[3,"At","","`@`",null,null],[12,"0","","",98,null],[3,"Bang","","`!`",null,null],[12,"0","","",99,null],[3,"Caret","","`^`",null,null],[12,"0","","",100,null],[3,"CaretEq","","`^=`",null,null],[12,"0","","",101,null],[3,"Colon","","`:`",null,null],[12,"0","","",102,null],[3,"Colon2","","`::`",null,null],[12,"0","","",103,null],[3,"Comma","","`,`",null,null],[12,"0","","",104,null],[3,"Div","","`/`",null,null],[12,"0","","",105,null],[3,"DivEq","","`/=`",null,null],[12,"0","","",106,null],[3,"Dot","","`.`",null,null],[12,"0","","",107,null],[3,"Dot2","","`..`",null,null],[12,"0","","",108,null],[3,"Dot3","","`...`",null,null],[12,"0","","",109,null],[3,"DotDotEq","","`..=`",null,null],[12,"0","","",110,null],[3,"Eq","","`=`",null,null],[12,"0","","",111,null],[3,"EqEq","","`==`",null,null],[12,"0","","",112,null],[3,"Ge","","`>=`",null,null],[12,"0","","",113,null],[3,"Gt","","`>`",null,null],[12,"0","","",114,null],[3,"Le","","`<=`",null,null],[12,"0","","",115,null],[3,"Lt","","`<`",null,null],[12,"0","","",116,null],[3,"MulEq","","`*=`",null,null],[12,"0","","",117,null],[3,"Ne","","`!=`",null,null],[12,"0","","",118,null],[3,"Or","","`|`",null,null],[12,"0","","",119,null],[3,"OrEq","","`|=`",null,null],[12,"0","","",120,null],[3,"OrOr","","`||`",null,null],[12,"0","","",121,null],[3,"Pound","","`#`",null,null],[12,"0","","",122,null],[3,"Question","","`?`",null,null],[12,"0","","",123,null],[3,"RArrow","","`->`",null,null],[12,"0","","",124,null],[3,"LArrow","","`<-`",null,null],[12,"0","","",125,null],[3,"Rem","","`%`",null,null],[12,"0","","",126,null],[3,"RemEq","","`%=`",null,null],[12,"0","","",127,null],[3,"Rocket","","`=>`",null,null],[12,"0","","",128,null],[3,"Semi","","`;`",null,null],[12,"0","","",129,null],[3,"Shl","","`<<`",null,null],[12,"0","","",130,null],[3,"ShlEq","","`<<=`",null,null],[12,"0","","",131,null],[3,"Shr","","`>>`",null,null],[12,"0","","",132,null],[3,"ShrEq","","`>>=`",null,null],[12,"0","","",133,null],[3,"Star","","`*`",null,null],[12,"0","","",134,null],[3,"Sub","","`-`",null,null],[12,"0","","",135,null],[3,"SubEq","","`-=`",null,null],[12,"0","","",136,null],[3,"Underscore","","`_`",null,null],[12,"0","","",137,null],[3,"Brace","","`{...}`",null,null],[12,"0","","",138,null],[3,"Bracket","","`[...]`",null,null],[12,"0","","",139,null],[3,"Paren","","`(...)`",null,null],[12,"0","","",140,null],[3,"Group","","None-delimited group",null,null],[12,"0","","",141,null],[3,"As","","`as`",null,null],[12,"0","","",142,null],[3,"Auto","","`auto`",null,null],[12,"0","","",143,null],[3,"Box","","`box`",null,null],[12,"0","","",144,null],[3,"Break","","`break`",null,null],[12,"0","","",145,null],[3,"CapSelf","","`Self`",null,null],[12,"0","","",146,null],[3,"Catch","","`catch`",null,null],[12,"0","","",147,null],[3,"Const","","`const`",null,null],[12,"0","","",148,null],[3,"Continue","","`continue`",null,null],[12,"0","","",149,null],[3,"Crate","","`crate`",null,null],[12,"0","","",150,null],[3,"Default","","`default`",null,null],[12,"0","","",151,null],[3,"Do","","`do`",null,null],[12,"0","","",152,null],[3,"Dyn","","`dyn`",null,null],[12,"0","","",153,null],[3,"Else","","`else`",null,null],[12,"0","","",154,null],[3,"Enum","","`enum`",null,null],[12,"0","","",155,null],[3,"Extern","","`extern`",null,null],[12,"0","","",156,null],[3,"Fn","","`fn`",null,null],[12,"0","","",157,null],[3,"For","","`for`",null,null],[12,"0","","",158,null],[3,"If","","`if`",null,null],[12,"0","","",159,null],[3,"Impl","","`impl`",null,null],[12,"0","","",160,null],[3,"In","","`in`",null,null],[12,"0","","",161,null],[3,"Let","","`let`",null,null],[12,"0","","",162,null],[3,"Loop","","`loop`",null,null],[12,"0","","",163,null],[3,"Macro","","`macro`",null,null],[12,"0","","",164,null],[3,"Match","","`match`",null,null],[12,"0","","",165,null],[3,"Mod","","`mod`",null,null],[12,"0","","",166,null],[3,"Move","","`move`",null,null],[12,"0","","",167,null],[3,"Mut","","`mut`",null,null],[12,"0","","",168,null],[3,"Pub","","`pub`",null,null],[12,"0","","",169,null],[3,"Ref","","`ref`",null,null],[12,"0","","",170,null],[3,"Return","","`return`",null,null],[12,"0","","",171,null],[3,"Self_","","`self`",null,null],[12,"0","","",172,null],[3,"Static","","`static`",null,null],[12,"0","","",173,null],[3,"Struct","","`struct`",null,null],[12,"0","","",174,null],[3,"Super","","`super`",null,null],[12,"0","","",175,null],[3,"Trait","","`trait`",null,null],[12,"0","","",176,null],[3,"Type","","`type`",null,null],[12,"0","","",177,null],[3,"Union","","`union`",null,null],[12,"0","","",178,null],[3,"Unsafe","","`unsafe`",null,null],[12,"0","","",179,null],[3,"Use","","`use`",null,null],[12,"0","","",180,null],[3,"Where","","`where`",null,null],[12,"0","","",181,null],[3,"While","","`while`",null,null],[12,"0","","",182,null],[3,"Yield","","`yield`",null,null],[12,"0","","",183,null],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"add"}}],[11,"new","","",93,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",93,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",93,{"inputs":[{"name":"cursor"}],"output":{"generics":["add"],"name":"presult"}}],[11,"description","","",93,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",93,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"addeq"}}],[11,"new","","",94,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",94,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",94,{"inputs":[{"name":"cursor"}],"output":{"generics":["addeq"],"name":"presult"}}],[11,"description","","",94,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",94,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"and"}}],[11,"new","","",95,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",95,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",95,{"inputs":[{"name":"cursor"}],"output":{"generics":["and"],"name":"presult"}}],[11,"description","","",95,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",95,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"andand"}}],[11,"new","","",96,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",96,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",96,{"inputs":[{"name":"cursor"}],"output":{"generics":["andand"],"name":"presult"}}],[11,"description","","",96,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",96,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"andeq"}}],[11,"new","","",97,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",97,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",97,{"inputs":[{"name":"cursor"}],"output":{"generics":["andeq"],"name":"presult"}}],[11,"description","","",97,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",97,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"at"}}],[11,"new","","",98,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",98,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",98,{"inputs":[{"name":"cursor"}],"output":{"generics":["at"],"name":"presult"}}],[11,"description","","",98,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",98,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bang"}}],[11,"new","","",99,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",99,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",99,{"inputs":[{"name":"cursor"}],"output":{"generics":["bang"],"name":"presult"}}],[11,"description","","",99,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",99,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"caret"}}],[11,"new","","",100,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",100,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",100,{"inputs":[{"name":"cursor"}],"output":{"generics":["caret"],"name":"presult"}}],[11,"description","","",100,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",100,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"careteq"}}],[11,"new","","",101,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",101,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",101,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",101,{"inputs":[{"name":"cursor"}],"output":{"generics":["careteq"],"name":"presult"}}],[11,"description","","",101,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",101,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"colon"}}],[11,"new","","",102,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",102,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",102,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon"],"name":"presult"}}],[11,"description","","",102,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",102,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"colon2"}}],[11,"new","","",103,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",103,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",103,{"inputs":[{"name":"cursor"}],"output":{"generics":["colon2"],"name":"presult"}}],[11,"description","","",103,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",103,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"comma"}}],[11,"new","","",104,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",104,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",104,{"inputs":[{"name":"cursor"}],"output":{"generics":["comma"],"name":"presult"}}],[11,"description","","",104,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",104,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"div"}}],[11,"new","","",105,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",105,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",105,{"inputs":[{"name":"cursor"}],"output":{"generics":["div"],"name":"presult"}}],[11,"description","","",105,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",105,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"diveq"}}],[11,"new","","",106,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",106,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",106,{"inputs":[{"name":"cursor"}],"output":{"generics":["diveq"],"name":"presult"}}],[11,"description","","",106,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",106,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"dot"}}],[11,"new","","",107,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",107,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",107,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot"],"name":"presult"}}],[11,"description","","",107,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",107,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"dot2"}}],[11,"new","","",108,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",108,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",108,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",108,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot2"],"name":"presult"}}],[11,"description","","",108,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",108,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"dot3"}}],[11,"new","","",109,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",109,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",109,{"inputs":[{"name":"cursor"}],"output":{"generics":["dot3"],"name":"presult"}}],[11,"description","","",109,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",109,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"dotdoteq"}}],[11,"new","","",110,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",110,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",110,{"inputs":[{"name":"cursor"}],"output":{"generics":["dotdoteq"],"name":"presult"}}],[11,"description","","",110,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",110,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"eq"}}],[11,"new","","",111,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",111,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",111,{"inputs":[{"name":"cursor"}],"output":{"generics":["eq"],"name":"presult"}}],[11,"description","","",111,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",111,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"eqeq"}}],[11,"new","","",112,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",112,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",112,{"inputs":[{"name":"cursor"}],"output":{"generics":["eqeq"],"name":"presult"}}],[11,"description","","",112,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",112,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"ge"}}],[11,"new","","",113,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",113,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",113,{"inputs":[{"name":"cursor"}],"output":{"generics":["ge"],"name":"presult"}}],[11,"description","","",113,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",113,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"gt"}}],[11,"new","","",114,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",114,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",114,{"inputs":[{"name":"cursor"}],"output":{"generics":["gt"],"name":"presult"}}],[11,"description","","",114,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",114,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"le"}}],[11,"new","","",115,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",115,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",115,{"inputs":[{"name":"cursor"}],"output":{"generics":["le"],"name":"presult"}}],[11,"description","","",115,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",115,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"lt"}}],[11,"new","","",116,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",116,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",116,{"inputs":[{"name":"cursor"}],"output":{"generics":["lt"],"name":"presult"}}],[11,"description","","",116,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",116,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"muleq"}}],[11,"new","","",117,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",117,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",117,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",117,{"inputs":[{"name":"cursor"}],"output":{"generics":["muleq"],"name":"presult"}}],[11,"description","","",117,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",117,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"ne"}}],[11,"new","","",118,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",118,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",118,{"inputs":[{"name":"cursor"}],"output":{"generics":["ne"],"name":"presult"}}],[11,"description","","",118,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",118,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"or"}}],[11,"new","","",119,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",119,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",119,{"inputs":[{"name":"cursor"}],"output":{"generics":["or"],"name":"presult"}}],[11,"description","","",119,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",119,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"oreq"}}],[11,"new","","",120,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",120,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",120,{"inputs":[{"name":"cursor"}],"output":{"generics":["oreq"],"name":"presult"}}],[11,"description","","",120,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",120,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"oror"}}],[11,"new","","",121,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",121,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",121,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",121,{"inputs":[{"name":"cursor"}],"output":{"generics":["oror"],"name":"presult"}}],[11,"description","","",121,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",121,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"pound"}}],[11,"new","","",122,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",122,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",122,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",122,{"inputs":[{"name":"cursor"}],"output":{"generics":["pound"],"name":"presult"}}],[11,"description","","",122,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",122,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"question"}}],[11,"new","","",123,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",123,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",123,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",123,{"inputs":[{"name":"cursor"}],"output":{"generics":["question"],"name":"presult"}}],[11,"description","","",123,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",123,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"rarrow"}}],[11,"new","","",124,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",124,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",124,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",124,{"inputs":[{"name":"cursor"}],"output":{"generics":["rarrow"],"name":"presult"}}],[11,"description","","",124,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",124,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"larrow"}}],[11,"new","","",125,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",125,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",125,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",125,{"inputs":[{"name":"cursor"}],"output":{"generics":["larrow"],"name":"presult"}}],[11,"description","","",125,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",125,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"rem"}}],[11,"new","","",126,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",126,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",126,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",126,{"inputs":[{"name":"cursor"}],"output":{"generics":["rem"],"name":"presult"}}],[11,"description","","",126,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",126,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"remeq"}}],[11,"new","","",127,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",127,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",127,{"inputs":[{"name":"cursor"}],"output":{"generics":["remeq"],"name":"presult"}}],[11,"description","","",127,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",127,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"rocket"}}],[11,"new","","",128,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",128,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",128,{"inputs":[{"name":"cursor"}],"output":{"generics":["rocket"],"name":"presult"}}],[11,"description","","",128,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",128,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"semi"}}],[11,"new","","",129,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",129,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",129,{"inputs":[{"name":"cursor"}],"output":{"generics":["semi"],"name":"presult"}}],[11,"description","","",129,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",129,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"shl"}}],[11,"new","","",130,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",130,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",130,{"inputs":[{"name":"cursor"}],"output":{"generics":["shl"],"name":"presult"}}],[11,"description","","",130,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",130,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"shleq"}}],[11,"new","","",131,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",131,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",131,{"inputs":[{"name":"cursor"}],"output":{"generics":["shleq"],"name":"presult"}}],[11,"description","","",131,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",131,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"shr"}}],[11,"new","","",132,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",132,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",132,{"inputs":[{"name":"cursor"}],"output":{"generics":["shr"],"name":"presult"}}],[11,"description","","",132,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",132,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"shreq"}}],[11,"new","","",133,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",133,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",133,{"inputs":[{"name":"cursor"}],"output":{"generics":["shreq"],"name":"presult"}}],[11,"description","","",133,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",133,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"star"}}],[11,"new","","",134,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",134,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",134,{"inputs":[{"name":"cursor"}],"output":{"generics":["star"],"name":"presult"}}],[11,"description","","",134,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",134,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"sub"}}],[11,"new","","",135,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",135,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",135,{"inputs":[{"name":"cursor"}],"output":{"generics":["sub"],"name":"presult"}}],[11,"description","","",135,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",135,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"subeq"}}],[11,"new","","",136,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",136,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",136,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",136,{"inputs":[{"name":"cursor"}],"output":{"generics":["subeq"],"name":"presult"}}],[11,"description","","",136,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",136,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"underscore"}}],[11,"new","","",137,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"default","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",137,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",137,{"inputs":[{"name":"cursor"}],"output":{"generics":["underscore"],"name":"presult"}}],[11,"description","","",137,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",137,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"brace"}}],[11,"default","","",138,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",138,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",138,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",138,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"bracket"}}],[11,"default","","",139,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",139,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",139,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",139,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"paren"}}],[11,"default","","",140,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",140,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",140,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",140,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"default","","",141,{"inputs":[],"output":{"name":"self"}}],[11,"surround","","",141,{"inputs":[{"name":"self"},{"name":"tokens"},{"name":"f"}],"output":null}],[11,"parse","","",141,{"inputs":[{"name":"cursor"},{"name":"f"}],"output":{"name":"presult"}}],[11,"from","","",141,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"as"}}],[11,"default","","",142,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",142,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",142,{"inputs":[{"name":"cursor"}],"output":{"generics":["as"],"name":"presult"}}],[11,"description","","",142,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",142,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"auto"}}],[11,"default","","",143,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",143,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",143,{"inputs":[{"name":"cursor"}],"output":{"generics":["auto"],"name":"presult"}}],[11,"description","","",143,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",143,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",144,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",144,{"inputs":[{"name":"cursor"}],"output":{"generics":["box"],"name":"presult"}}],[11,"description","","",144,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",144,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"default","","",145,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",145,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",145,{"inputs":[{"name":"cursor"}],"output":{"generics":["break"],"name":"presult"}}],[11,"description","","",145,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",145,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"capself"}}],[11,"default","","",146,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",146,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",146,{"inputs":[{"name":"cursor"}],"output":{"generics":["capself"],"name":"presult"}}],[11,"description","","",146,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",146,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"catch"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",147,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",147,{"inputs":[{"name":"cursor"}],"output":{"generics":["catch"],"name":"presult"}}],[11,"description","","",147,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",147,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"const"}}],[11,"default","","",148,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",148,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",148,{"inputs":[{"name":"cursor"}],"output":{"generics":["const"],"name":"presult"}}],[11,"description","","",148,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",148,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"continue"}}],[11,"default","","",149,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",149,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",149,{"inputs":[{"name":"cursor"}],"output":{"generics":["continue"],"name":"presult"}}],[11,"description","","",149,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",149,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",150,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",150,{"inputs":[{"name":"cursor"}],"output":{"generics":["crate"],"name":"presult"}}],[11,"description","","",150,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",150,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",151,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",151,{"inputs":[{"name":"cursor"}],"output":{"generics":["default"],"name":"presult"}}],[11,"description","","",151,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",151,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"do"}}],[11,"default","","",152,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",152,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",152,{"inputs":[{"name":"cursor"}],"output":{"generics":["do"],"name":"presult"}}],[11,"description","","",152,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",152,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"dyn"}}],[11,"default","","",153,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",153,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",153,{"inputs":[{"name":"cursor"}],"output":{"generics":["dyn"],"name":"presult"}}],[11,"description","","",153,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",153,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"else"}}],[11,"default","","",154,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",154,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",154,{"inputs":[{"name":"cursor"}],"output":{"generics":["else"],"name":"presult"}}],[11,"description","","",154,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",154,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"enum"}}],[11,"default","","",155,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",155,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",155,{"inputs":[{"name":"cursor"}],"output":{"generics":["enum"],"name":"presult"}}],[11,"description","","",155,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",155,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"extern"}}],[11,"default","","",156,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",156,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",156,{"inputs":[{"name":"cursor"}],"output":{"generics":["extern"],"name":"presult"}}],[11,"description","","",156,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",156,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"fn"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",157,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",157,{"inputs":[{"name":"cursor"}],"output":{"generics":["fn"],"name":"presult"}}],[11,"description","","",157,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",157,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"for"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",158,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",158,{"inputs":[{"name":"cursor"}],"output":{"generics":["for"],"name":"presult"}}],[11,"description","","",158,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",158,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"if"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",159,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",159,{"inputs":[{"name":"cursor"}],"output":{"generics":["if"],"name":"presult"}}],[11,"description","","",159,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",159,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"impl"}}],[11,"default","","",160,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",160,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",160,{"inputs":[{"name":"cursor"}],"output":{"generics":["impl"],"name":"presult"}}],[11,"description","","",160,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",160,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"in"}}],[11,"default","","",161,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",161,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",161,{"inputs":[{"name":"cursor"}],"output":{"generics":["in"],"name":"presult"}}],[11,"description","","",161,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",161,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"let"}}],[11,"default","","",162,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",162,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",162,{"inputs":[{"name":"cursor"}],"output":{"generics":["let"],"name":"presult"}}],[11,"description","","",162,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",162,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"loop"}}],[11,"default","","",163,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",163,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",163,{"inputs":[{"name":"cursor"}],"output":{"generics":["loop"],"name":"presult"}}],[11,"description","","",163,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",163,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"default","","",164,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",164,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",164,{"inputs":[{"name":"cursor"}],"output":{"generics":["macro"],"name":"presult"}}],[11,"description","","",164,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",164,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"default","","",165,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",165,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",165,{"inputs":[{"name":"cursor"}],"output":{"generics":["match"],"name":"presult"}}],[11,"description","","",165,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",165,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"default","","",166,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",166,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",166,{"inputs":[{"name":"cursor"}],"output":{"generics":["mod"],"name":"presult"}}],[11,"description","","",166,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",166,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",167,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",167,{"inputs":[{"name":"cursor"}],"output":{"generics":["move"],"name":"presult"}}],[11,"description","","",167,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",167,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"mut"}}],[11,"default","","",168,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",168,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",168,{"inputs":[{"name":"cursor"}],"output":{"generics":["mut"],"name":"presult"}}],[11,"description","","",168,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",168,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"pub"}}],[11,"default","","",169,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",169,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",169,{"inputs":[{"name":"cursor"}],"output":{"generics":["pub"],"name":"presult"}}],[11,"description","","",169,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",169,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"default","","",170,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",170,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",170,{"inputs":[{"name":"cursor"}],"output":{"generics":["ref"],"name":"presult"}}],[11,"description","","",170,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",170,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"return"}}],[11,"default","","",171,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",171,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",171,{"inputs":[{"name":"cursor"}],"output":{"generics":["return"],"name":"presult"}}],[11,"description","","",171,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",171,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"self_"}}],[11,"default","","",172,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",172,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",172,{"inputs":[{"name":"cursor"}],"output":{"generics":["self_"],"name":"presult"}}],[11,"description","","",172,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",172,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"static"}}],[11,"default","","",173,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",173,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",173,{"inputs":[{"name":"cursor"}],"output":{"generics":["static"],"name":"presult"}}],[11,"description","","",173,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",173,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"struct"}}],[11,"default","","",174,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",174,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",174,{"inputs":[{"name":"cursor"}],"output":{"generics":["struct"],"name":"presult"}}],[11,"description","","",174,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",174,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"super"}}],[11,"default","","",175,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",175,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",175,{"inputs":[{"name":"cursor"}],"output":{"generics":["super"],"name":"presult"}}],[11,"description","","",175,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",175,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"trait"}}],[11,"default","","",176,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",176,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",176,{"inputs":[{"name":"cursor"}],"output":{"generics":["trait"],"name":"presult"}}],[11,"description","","",176,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",176,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"default","","",177,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",177,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",177,{"inputs":[{"name":"cursor"}],"output":{"generics":["type"],"name":"presult"}}],[11,"description","","",177,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",177,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"default","","",178,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",178,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",178,{"inputs":[{"name":"cursor"}],"output":{"generics":["union"],"name":"presult"}}],[11,"description","","",178,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",178,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"unsafe"}}],[11,"default","","",179,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",179,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",179,{"inputs":[{"name":"cursor"}],"output":{"generics":["unsafe"],"name":"presult"}}],[11,"description","","",179,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",179,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"use"}}],[11,"default","","",180,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",180,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",180,{"inputs":[{"name":"cursor"}],"output":{"generics":["use"],"name":"presult"}}],[11,"description","","",180,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",180,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"where"}}],[11,"default","","",181,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",181,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",181,{"inputs":[{"name":"cursor"}],"output":{"generics":["where"],"name":"presult"}}],[11,"description","","",181,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",181,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"while"}}],[11,"default","","",182,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",182,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",182,{"inputs":[{"name":"cursor"}],"output":{"generics":["while"],"name":"presult"}}],[11,"description","","",182,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",182,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"yield"}}],[11,"default","","",183,{"inputs":[],"output":{"name":"self"}}],[11,"to_tokens","","",183,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",183,{"inputs":[{"name":"cursor"}],"output":{"generics":["yield"],"name":"presult"}}],[11,"description","","",183,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"from","","",183,{"inputs":[{"name":"span"}],"output":{"name":"self"}}],[11,"parse_inner","syn","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_outer","","",0,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"interpret_meta","","Parses the tokens after the path as a `Meta` if possible.",0,{"inputs":[{"name":"self"}],"output":{"generics":["meta"],"name":"option"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"meta"}}],[11,"from","","",70,{"inputs":[{"name":"ident"}],"output":{"name":"meta"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"metalist"}}],[11,"from","","",70,{"inputs":[{"name":"metalist"}],"output":{"name":"meta"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"metanamevalue"}}],[11,"from","","",70,{"inputs":[{"name":"metanamevalue"}],"output":{"name":"meta"}}],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"name","","Returns the identifier that begins this structured meta item.",70,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"nestedmeta"}}],[11,"from","","",71,{"inputs":[{"name":"meta"}],"output":{"name":"nestedmeta"}}],[11,"from","","",71,{"inputs":[{"name":"lit"}],"output":{"name":"nestedmeta"}}],[11,"to_tokens","","",71,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",6,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",6,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",4,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",5,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",5,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_named","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_unnamed","","",3,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",73,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",73,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fieldsnamed"}}],[11,"from","","",72,{"inputs":[{"name":"fieldsnamed"}],"output":{"name":"fields"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fieldsunnamed"}}],[11,"from","","",72,{"inputs":[{"name":"fieldsunnamed"}],"output":{"name":"fields"}}],[11,"to_tokens","","",72,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"iter","","Get an iterator over the [`Field`] items in this object. This iterator can be used to iterate over a named or unnamed struct or variant's fields uniformly.",72,{"inputs":[{"name":"self"}],"output":{"generics":["field","comma"],"name":"iter"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vispublic"}}],[11,"from","","",73,{"inputs":[{"name":"vispublic"}],"output":{"name":"visibility"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"viscrate"}}],[11,"from","","",73,{"inputs":[{"name":"viscrate"}],"output":{"name":"visibility"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"visrestricted"}}],[11,"from","","",73,{"inputs":[{"name":"visrestricted"}],"output":{"name":"visibility"}}],[11,"to_tokens","","",73,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",74,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",74,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",14,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",14,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",15,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",15,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",16,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",16,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",75,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"exprbox"}}],[11,"from","","",74,{"inputs":[{"name":"exprbox"}],"output":{"name":"expr"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"exprinplace"}}],[11,"from","","",74,{"inputs":[{"name":"exprinplace"}],"output":{"name":"expr"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"exprarray"}}],[11,"from","","",74,{"inputs":[{"name":"exprarray"}],"output":{"name":"expr"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"exprcall"}}],[11,"from","","",74,{"inputs":[{"name":"exprcall"}],"output":{"name":"expr"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"exprmethodcall"}}],[11,"from","","",74,{"inputs":[{"name":"exprmethodcall"}],"output":{"name":"expr"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"exprtuple"}}],[11,"from","","",74,{"inputs":[{"name":"exprtuple"}],"output":{"name":"expr"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"exprbinary"}}],[11,"from","","",74,{"inputs":[{"name":"exprbinary"}],"output":{"name":"expr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"exprunary"}}],[11,"from","","",74,{"inputs":[{"name":"exprunary"}],"output":{"name":"expr"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"exprlit"}}],[11,"from","","",74,{"inputs":[{"name":"exprlit"}],"output":{"name":"expr"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exprcast"}}],[11,"from","","",74,{"inputs":[{"name":"exprcast"}],"output":{"name":"expr"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"exprtype"}}],[11,"from","","",74,{"inputs":[{"name":"exprtype"}],"output":{"name":"expr"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"exprif"}}],[11,"from","","",74,{"inputs":[{"name":"exprif"}],"output":{"name":"expr"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"expriflet"}}],[11,"from","","",74,{"inputs":[{"name":"expriflet"}],"output":{"name":"expr"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"exprwhile"}}],[11,"from","","",74,{"inputs":[{"name":"exprwhile"}],"output":{"name":"expr"}}],[11,"clone","","",193,{"inputs":[{"name":"self"}],"output":{"name":"exprwhilelet"}}],[11,"from","","",74,{"inputs":[{"name":"exprwhilelet"}],"output":{"name":"expr"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"exprforloop"}}],[11,"from","","",74,{"inputs":[{"name":"exprforloop"}],"output":{"name":"expr"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"exprloop"}}],[11,"from","","",74,{"inputs":[{"name":"exprloop"}],"output":{"name":"expr"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"exprmatch"}}],[11,"from","","",74,{"inputs":[{"name":"exprmatch"}],"output":{"name":"expr"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"exprclosure"}}],[11,"from","","",74,{"inputs":[{"name":"exprclosure"}],"output":{"name":"expr"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"exprunsafe"}}],[11,"from","","",74,{"inputs":[{"name":"exprunsafe"}],"output":{"name":"expr"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"exprblock"}}],[11,"from","","",74,{"inputs":[{"name":"exprblock"}],"output":{"name":"expr"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"exprassign"}}],[11,"from","","",74,{"inputs":[{"name":"exprassign"}],"output":{"name":"expr"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"exprassignop"}}],[11,"from","","",74,{"inputs":[{"name":"exprassignop"}],"output":{"name":"expr"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"exprfield"}}],[11,"from","","",74,{"inputs":[{"name":"exprfield"}],"output":{"name":"expr"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exprindex"}}],[11,"from","","",74,{"inputs":[{"name":"exprindex"}],"output":{"name":"expr"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"exprrange"}}],[11,"from","","",74,{"inputs":[{"name":"exprrange"}],"output":{"name":"expr"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"exprpath"}}],[11,"from","","",74,{"inputs":[{"name":"exprpath"}],"output":{"name":"expr"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"expraddrof"}}],[11,"from","","",74,{"inputs":[{"name":"expraddrof"}],"output":{"name":"expr"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"exprbreak"}}],[11,"from","","",74,{"inputs":[{"name":"exprbreak"}],"output":{"name":"expr"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"exprcontinue"}}],[11,"from","","",74,{"inputs":[{"name":"exprcontinue"}],"output":{"name":"expr"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"exprreturn"}}],[11,"from","","",74,{"inputs":[{"name":"exprreturn"}],"output":{"name":"expr"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"exprmacro"}}],[11,"from","","",74,{"inputs":[{"name":"exprmacro"}],"output":{"name":"expr"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"exprstruct"}}],[11,"from","","",74,{"inputs":[{"name":"exprstruct"}],"output":{"name":"expr"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"exprrepeat"}}],[11,"from","","",74,{"inputs":[{"name":"exprrepeat"}],"output":{"name":"expr"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"exprparen"}}],[11,"from","","",74,{"inputs":[{"name":"exprparen"}],"output":{"name":"expr"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"exprgroup"}}],[11,"from","","",74,{"inputs":[{"name":"exprgroup"}],"output":{"name":"expr"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"exprtry"}}],[11,"from","","",74,{"inputs":[{"name":"exprtry"}],"output":{"name":"expr"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"exprcatch"}}],[11,"from","","",74,{"inputs":[{"name":"exprcatch"}],"output":{"name":"expr"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"expryield"}}],[11,"from","","",74,{"inputs":[{"name":"expryield"}],"output":{"name":"expr"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"exprverbatim"}}],[11,"from","","",74,{"inputs":[{"name":"exprverbatim"}],"output":{"name":"expr"}}],[11,"to_tokens","","",74,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"member"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"from","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"index"}}],[11,"parse","","",22,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",22,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",76,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",76,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",23,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",23,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",20,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",20,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",28,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",28,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",78,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",78,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",27,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",27,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",77,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",77,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",21,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",21,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",29,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",29,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",79,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",79,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",215,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",216,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",217,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",28,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",77,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"default","","",22,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"genericparam"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"typeparam"}}],[11,"from","","",76,{"inputs":[{"name":"typeparam"}],"output":{"name":"genericparam"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"from","","",76,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"genericparam"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"constparam"}}],[11,"from","","",76,{"inputs":[{"name":"constparam"}],"output":{"name":"genericparam"}}],[11,"to_tokens","","",76,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"typeparams"}}],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"typeparamsmut"}}],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"lifetimes"}}],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the lifetime parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"lifetimesmut"}}],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"constparams"}}],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the constant parameters in `self.params`.",22,{"inputs":[{"name":"self"}],"output":{"name":"constparamsmut"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"implgenerics"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"typegenerics"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",22,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",216,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"boundlifetimes"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"boundlifetimes"}}],[11,"new","","",23,{"inputs":[{"name":"lifetime"}],"output":{"name":"self"}}],[11,"from","","",28,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"typeparambound"}}],[11,"from","","",78,{"inputs":[{"name":"traitbound"}],"output":{"name":"typeparambound"}}],[11,"from","","",78,{"inputs":[{"name":"lifetime"}],"output":{"name":"typeparambound"}}],[11,"to_tokens","","",78,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"traitbound"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"predicatetype"}}],[11,"from","","",79,{"inputs":[{"name":"predicatetype"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"predicatelifetime"}}],[11,"from","","",79,{"inputs":[{"name":"predicatelifetime"}],"output":{"name":"wherepredicate"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"predicateeq"}}],[11,"from","","",79,{"inputs":[{"name":"predicateeq"}],"output":{"name":"wherepredicate"}}],[11,"to_tokens","","",79,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"parse","","",30,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",30,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an ident with the given string representation.",30,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"self_"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"capself"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"super"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"crate"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",30,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"hash","","",30,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"parse","","",31,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",31,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"new","","",31,{"inputs":[{"name":"term"},{"name":"span"}],"output":{"name":"self"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"hash","","",31,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"parse","","",82,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",82,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",38,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",38,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",34,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",34,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",33,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",33,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",35,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",35,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",37,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",37,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",36,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",36,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",32,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",32,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",34,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",82,{"inputs":[{"name":"literal"},{"name":"span"}],"output":{"name":"self"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"litstr"}}],[11,"from","","",82,{"inputs":[{"name":"litstr"}],"output":{"name":"lit"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"litbytestr"}}],[11,"from","","",82,{"inputs":[{"name":"litbytestr"}],"output":{"name":"lit"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"litbyte"}}],[11,"from","","",82,{"inputs":[{"name":"litbyte"}],"output":{"name":"lit"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"litchar"}}],[11,"from","","",82,{"inputs":[{"name":"litchar"}],"output":{"name":"lit"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"litint"}}],[11,"from","","",82,{"inputs":[{"name":"litint"}],"output":{"name":"lit"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"litfloat"}}],[11,"from","","",82,{"inputs":[{"name":"litfloat"}],"output":{"name":"lit"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"litbool"}}],[11,"from","","",82,{"inputs":[{"name":"litbool"}],"output":{"name":"lit"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"litverbatim"}}],[11,"from","","",82,{"inputs":[{"name":"litverbatim"}],"output":{"name":"lit"}}],[11,"to_tokens","","",82,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"new","","",38,{"inputs":[{"name":"str"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",38,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","Parse a syntax tree node from the content of this string literal.",38,{"inputs":[{"name":"self"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"new","","",34,null],[11,"value","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"new","","",33,{"inputs":[{"name":"u8"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"new","","",35,{"inputs":[{"name":"char"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",35,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"new","","",37,{"inputs":[{"name":"u64"},{"name":"intsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"suffix","","",37,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"new","","",36,{"inputs":[{"name":"f64"},{"name":"floatsuffix"},{"name":"span"}],"output":{"name":"self"}}],[11,"value","","",36,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"suffix","","",36,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"intsuffix"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"floatsuffix"}}],[11,"parse","","",40,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",40,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"macro"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"macrodelimiter"}}],[11,"parse","","",44,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",44,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"datastruct"}}],[11,"from","","",85,{"inputs":[{"name":"datastruct"}],"output":{"name":"data"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"dataenum"}}],[11,"from","","",85,{"inputs":[{"name":"dataenum"}],"output":{"name":"data"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dataunion"}}],[11,"from","","",85,{"inputs":[{"name":"dataunion"}],"output":{"name":"data"}}],[11,"parse_binop","","",86,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",87,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",87,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",86,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",87,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"parse","","",90,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",90,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",90,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",58,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",58,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",47,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",47,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",56,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",56,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",57,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",57,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",48,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",48,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",53,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",53,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",51,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",51,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",60,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",60,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",52,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",52,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",55,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",55,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",89,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",89,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",59,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",59,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"without_plus","","",59,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",50,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",50,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",49,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",49,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",54,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",54,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",46,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",46,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",88,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",88,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",45,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",45,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",59,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",61,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",89,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",88,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"typeslice"}}],[11,"from","","",90,{"inputs":[{"name":"typeslice"}],"output":{"name":"type"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"typearray"}}],[11,"from","","",90,{"inputs":[{"name":"typearray"}],"output":{"name":"type"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"typeptr"}}],[11,"from","","",90,{"inputs":[{"name":"typeptr"}],"output":{"name":"type"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"typereference"}}],[11,"from","","",90,{"inputs":[{"name":"typereference"}],"output":{"name":"type"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"typebarefn"}}],[11,"from","","",90,{"inputs":[{"name":"typebarefn"}],"output":{"name":"type"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"typenever"}}],[11,"from","","",90,{"inputs":[{"name":"typenever"}],"output":{"name":"type"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"typetuple"}}],[11,"from","","",90,{"inputs":[{"name":"typetuple"}],"output":{"name":"type"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"typepath"}}],[11,"from","","",90,{"inputs":[{"name":"typepath"}],"output":{"name":"type"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"typetraitobject"}}],[11,"from","","",90,{"inputs":[{"name":"typetraitobject"}],"output":{"name":"type"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"typeimpltrait"}}],[11,"from","","",90,{"inputs":[{"name":"typeimpltrait"}],"output":{"name":"type"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"typeparen"}}],[11,"from","","",90,{"inputs":[{"name":"typeparen"}],"output":{"name":"type"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"typegroup"}}],[11,"from","","",90,{"inputs":[{"name":"typegroup"}],"output":{"name":"type"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"typeinfer"}}],[11,"from","","",90,{"inputs":[{"name":"typeinfer"}],"output":{"name":"type"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"typemacro"}}],[11,"from","","",90,{"inputs":[{"name":"typemacro"}],"output":{"name":"type"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"typeverbatim"}}],[11,"from","","",90,{"inputs":[{"name":"typeverbatim"}],"output":{"name":"type"}}],[11,"to_tokens","","",90,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"barefnargname"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"returntype"}}],[11,"parse","","",65,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",65,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",91,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse","","",62,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",62,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",64,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",64,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",66,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",66,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse","","",63,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","",63,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[11,"parse_mod_style","","",65,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"to_tokens","","",65,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",66,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",92,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",91,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",62,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",63,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",64,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",68,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"global","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"pathtokens"}}],[11,"from","","",65,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"from","","",66,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"patharguments"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"genericargument"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedgenericarguments"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"binding"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedgenericarguments"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[0,"buffer","","A stably addressed token buffer supporting efficient traversal based on a cheaply copyable cursor.",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times, unlike `TokenStream` which requires a deep copy in order to traverse more than once.",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",218,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the input `TokenStream`.",218,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenbuffer"}}],[11,"begin","","Creates a cursor referencing the first token in the buffer and able to traverse until the end of the buffer.",218,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"cursor"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"self"},{"name":"cursor"}],"output":{"name":"bool"}}],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",219,{"inputs":[],"output":{"name":"self"}}],[11,"eof","","Checks whether the cursor is currently pointing at the end of its valid scope.",219,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"group","","If the cursor is pointing at a `Group` with the given delimiter, returns a cursor into that group and one pointing to the next `TokenTree`.",219,{"inputs":[{"name":"self"},{"name":"delimiter"}],"output":{"name":"option"}}],[11,"term","","If the cursor is pointing at a `Term`, returns it along with a cursor pointing at the next `TokenTree`.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"op","","If the cursor is pointing at an `Op`, returns it along with a cursor pointing at the next `TokenTree`.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"literal","","If the cursor is pointing at a `Literal`, return it along with a cursor pointing at the next `TokenTree`.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"token_stream","","Copies all remaining tokens visible from this cursor into a `TokenStream`.",219,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it along with a cursor pointing at the next `TokenTree`.",219,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"span","","Returns the `Span` of the current token, or `Span::call_site()` if this cursor points to eof.",219,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[0,"synom","syn","Parsing interface for parsing a token stream into a syntax tree node.",null,null],[3,"ParseError","syn::synom","Error returned when a `Synom` parser cannot parse the input tokens.",null,null],[6,"PResult","","The result of a `Synom` parser.",null,null],[8,"Synom","","Parsing interface implemented by all types that can be parsed in a default way from a token stream.",null,null],[10,"parse","","",220,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"description","","A short name of the type being parsed.",220,{"inputs":[],"output":{"generics":["str"],"name":"option"}}],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax tree node.",null,null],[16,"Output","","",221,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax tree node.",221,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse","","Parse tokens of source code into the chosen syntax tree node.",221,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"generics":["parseerror"],"name":"result"}}],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree node.",221,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["parseerror"],"name":"result"}}],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by punctuation.",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T` separated by punctuation of type `P`.",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut T, &mut P>`.",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its trailing punctuation of type `P` if any.",null,null],[13,"Punctuated","","",222,null],[13,"End","","",222,null],[11,"to_tokens","","",223,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",222,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"clone","","",223,{"inputs":[{"name":"self"}],"output":{"name":"punctuated"}}],[11,"new","","Creates an empty punctuated sequence.",223,{"inputs":[],"output":{"name":"punctuated"}}],[11,"is_empty","","Determines whether this punctuated sequence is empty, meaning it contains no syntax tree nodes or punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of syntax tree nodes in this punctuated sequence.",223,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"first","","Borrows the first punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last","","Borrows the last punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"last_mut","","Mutably borrows the last punctuated pair in this sequence.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of type `&T`.",223,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree nodes of type `&mut T`.",223,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"pairs","","Returns an iterator over the contents of this sequence as borrowed punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"pairs"}}],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as mutably borrowed punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"pairsmut"}}],[11,"into_pairs","","Returns an iterator over the contents of this sequence as owned punctuated pairs.",223,{"inputs":[{"name":"self"}],"output":{"name":"intopairs"}}],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated sequence. The sequence must previously have a trailing punctuation.",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_punct","","Appends a trailing punctuation onto the end of this punctuated sequence. The sequence must be non-empty and must not already have trailing punctuation.",223,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"pop","","Removes the last punctuated pair from this sequence, or `None` if the sequence is empty.",223,{"inputs":[{"name":"self"}],"output":{"generics":["pair"],"name":"option"}}],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a trailing punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it has a trailing punctuation.",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Appends a syntax tree node onto the end of this punctuated sequence.",223,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"insert","","Inserts an element at position `index`.",223,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"from_iter","","",223,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",223,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",223,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_iter","","",223,null],[11,"default","","",223,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",224,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",225,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",226,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",227,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",228,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",229,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_value","","Extracts the syntax tree node from this punctuated pair, discarding the following punctuation.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value","","Borrows the syntax tree node from this punctuated pair.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated pair.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"punct","","Borrows the punctuation from this punctuated pair, unless this pair is the final one and there is no trailing punctuation.",222,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a punctuated pair out of a syntax tree node and an optional following punctuation.",222,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"self"}}],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree node and optional following punctuation.",222,null],[11,"index","","",223,null],[11,"index_mut","","",223,null],[11,"parse_separated","","Parse zero or more syntax tree nodes with punctuation in between and no trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_nonempty","","Parse one or more syntax tree nodes with punctuation in bewteen and no trailing punctuation. allowing trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated","","Parse zero or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_terminated_nonempty","","Parse one or more syntax tree nodes with punctuation in between and optional trailing punctuation.",223,{"inputs":[{"name":"cursor"}],"output":{"name":"presult"}}],[11,"parse_separated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_separated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and no trailing punctuation.",223,null],[11,"parse_terminated_with","","Parse zero or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[11,"parse_terminated_nonempty_with","","Parse one or more syntax tree nodes using the given parser with punctuation in between and optional trailing punctuation.",223,null],[0,"spanned","syn","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete contents of a syntax tree node.",null,null],[10,"span","","Returns a `Span` covering the complete contents of this syntax tree node, or [`Span::call_site()`] if this node is empty.",230,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"fmt","syn::synom","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",231,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",231,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"named","syn","Define a parser function with the signature expected by syn parser combinators.",null,null],[14,"call","","Invoke the given parser function with zero or more arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Invert the result of a parser by parsing successfully if the given parser fails to parse and vice versa.",null,null],[14,"cond","","Execute a parser only if a condition is met, otherwise return None.",null,null],[14,"cond_reduce","","Execute a parser only if a condition is met, otherwise fail to parse.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything.",null,null],[14,"reject","","Unconditionally fail to parse anything.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, optionally naming each intermediate result, followed by a step to combine the intermediate results.",null,null],[14,"input_end","","Parse nothing and succeed only if the end of the enclosing block has been reached.",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"syn","","Parse any type that implements the `Synom` trait.",null,null],[14,"parens","","Parse inside of `(` `)` parentheses.",null,null],[14,"brackets","","Parse inside of `[` `]` square brackets.",null,null],[14,"braces","","Parse inside of `{` `}` curly braces.",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type representation of a given token.",null,null],[14,"punct","","Parse a single Rust punctuation token.",null,null],[14,"keyword","","Parse a single Rust keyword token.",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the [`quote!`] macro but uses type inference to figure out a return type for those tokens.",null,null]],"paths":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"ExprVerbatim"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Ident"],[3,"Lifetime"],[3,"LitBool"],[3,"LitByte"],[3,"LitByteStr"],[3,"LitChar"],[3,"LitFloat"],[3,"LitInt"],[3,"LitStr"],[3,"LitVerbatim"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"TypeVerbatim"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[3,"PathTokens"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"BareFnArgName"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"Rocket"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Underscore"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"As"],[3,"Auto"],[3,"Box"],[3,"Break"],[3,"CapSelf"],[3,"Catch"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Self_"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Type"],[3,"Union"],[3,"Unsafe"],[3,"Use"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprIf"],[3,"ExprIfLet"],[3,"ExprWhile"],[3,"ExprWhileLet"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprField"],[3,"ExprRange"],[3,"ExprAddrOf"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprCatch"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"TokenBuffer"],[3,"Cursor"],[8,"Synom"],[8,"Parser"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Spanned"],[3,"ParseError"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
